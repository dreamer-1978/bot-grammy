import {Bot,
  GrammyError,
  HttpError,
  Keyboard,
  InlineKeyboard,
  webhookCallback} from 'grammy'
import request from 'request'
import cheerio from 'cheerio'
import fs from 'fs'
import dotenv from "dotenv/config";


// https://api.telegram.org/bot5075619990:AAEyF5W1D_JmFuN6y6BGp2lpxXupKyR0Ays/setWebhook?remove
const token = process.env.BOT_API_KEY;
if (!token) throw new Error("BOT_TOKEN is unset");
const bot = new Bot(token);

const bus = 'https://yandex.ru/maps/213/moscow/stops/stop__9643717/?ll=37.826208%2C55.777070&tab=overview&z=16'

bot.api.setMyCommands([
  {
    command: "start",
    description: "–ó–∞–ø—É—Å–∫ –ë–æ—Ç–∞",
  },
  {
    command: "id",
    description: "–ú–æ–π ID",
  },
  {
    command: "serega",
    description: "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –°–µ—Ä–µ–≥–∏",
  },
  {
    command: "keyboard",
    description: "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞",
  },
  {
    command: "share",
    description: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –∏–ª–∏ –ª–æ–∫–∞—Ü–∏–∏",
  },
  {
    command: "html",
    description: "–ó–∞–ø—Ä–æ—Å Yandex",
  },
]);

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ Custom Keyboard...
const customKeyboard = new Keyboard()
  .text("–•–æ—Ä–æ—à–æ")
  .row()
  .text("–ü–ª–æ—Ö–æ")
  .row()
  .text("–ù–æ—Ä–º–∞–ª—å–Ω–æ")
  .oneTime();

const shareKeyboard = new Keyboard()
  .requestContact("–ö–æ–Ω—Ç–∞–∫—Ç")
  .requestLocation("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è")
  .resized();
//
bot.command(["start", "privet"], async (ctx) => {
  if (ctx.from.id === 1085738828) {
    await ctx.react("üëç");
    await ctx.reply("–ü—Ä–∏–≤–µ—Ç –°–µ—Ä–µ–≥–∞ —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å...");
  } else {
    await ctx.reply("–ü—Ä–∏–≤–µ—Ç! –Ø - –ë–æ—Ç ü§ñ");
  }
});

bot.command("id", async (ctx) => {
  await ctx.reply(`–ú–æ–π ID:  ${ctx.from.id}`);
});

// bot.on(':text', async (ctx) => {
//     ctx.reply("–ù–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å...");
// })
bot.on(":photo", async (ctx) => {
  ctx.reply("–≠—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è");
});

bot.on("::email", async (ctx) => {
  ctx.reply("–≠—Ç–æ Email");
});

bot.hears("serega", async (ctx) => {
  await ctx.reply("–ü—Ä–∏–≤–µ—Ç, –°–µ—Ä–µ–≥–∞! —Ç—ã –°—É–ø–µ—Ä –ö–æ–¥–µ—Ä...");
});

bot.command("keyboard", async (ctx) => {
  await ctx.reply("–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –°–µ—Ä–µ–≥–∞", {
    reply_markup: customKeyboard,
  });
});

bot.hears("–•–æ—Ä–æ—à–æ", (ctx) => {
  ctx.reply("–ó–¥–æ—Ä–æ–≤–æ —á—Ç–æ —Ö–æ—Ä–æ—à–æ, —Ä–∞–¥ —Å–ª—ã—à–∞—Ç—å —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!!!");
});

bot.command("share", async (ctx) => {
  await ctx.reply("–ü–æ–¥–µ–ª–∏—Ç—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –∏–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏", {
    reply_markup: shareKeyboard,
  });
});

bot.command("html", async (ctx) => {

  request(bus, function (error, response, body) {
    if (!error && response.statusCode == 200) {
      fs.writeFile('page.html', body, (err) => {
        if (err) throw err
        console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ page.html')
      })
    }
  });

    await ctx.reply("–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ page.html");
 
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –û—à–∏–±–∫–∏ Grammy...
bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handle update ${ctx.update.update_id}`);
  const e = err.err;
  if (e instanceof GrammyError) {
    console.error(`Error in Request ${e.description}`);
  } else if (e instanceof HttpError) {
    console.error("Cold not Contact Grammy", e);
  } else {
    console.error("Unknown error", e);
  }
});


// –ó–∞–ø—É—Å–∫ –ë–æ—Ç–∞ ...
export default webhookCallback(bot, "std/http");
// bot.start();
